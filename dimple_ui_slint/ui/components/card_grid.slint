import { Button, VerticalBox , ScrollView} from "std-widgets.slint";
import { Card, CardAdapter } from "card.slint";
import { Styles, Navigator, Label, AppState } from "../common.slint";
import {StyleMetrics, HorizontalBox} from "std-widgets.slint";
import { PopupMenu, PopupMenuButton } from "popup_menu.slint";

export struct CardGridAdapter {
    cards: [CardAdapter],
}

component CardMenu inherits PopupMenu {
    in property <CardAdapter> model;

    PopupMenuButton {
        text: "Play Later";
        icon: @image-url("../../icons/phosphor/SVGs/regular/list-plus.svg");
        clicked => { AppState.play_later(model.key); }
    }
    PopupMenuButton {
        text: "Play Next";
        icon: @image-url("../../icons/phosphor/SVGs/regular/queue.svg");
        clicked => { AppState.play_next(model.key); }
    }
    PopupMenuButton {
        text: "Play Now";
        icon: @image-url("../../icons/phosphor/SVGs/regular/play.svg");
        clicked => { AppState.play_now(model.key); }
    }
    PopupMenuButton {
        text: "Details";
        icon: @image-url("../../icons/phosphor/SVGs/regular/info.svg");
        clicked => { Navigator.navigate(model.title.url); }
    }
}    


export component CardGrid inherits VerticalBox {
    in-out property <[CardAdapter]> cards: cards_ph;
    in property <int> max-rows: 0;
    in property <length> card-width: Styles.thumbnail-width-large;

    property <int> cols: Math.max(1, Math.floor(self.width / (self.card-width + self.spacing)));
    property <int> rows: self.max-rows >= 1 ? self.max-rows : Math.ceil(cards.length / cols);
    // property <length> addl-spacing: (self.width - ((self.card-width + self.spacing) * cols)) / cols;

    alignment: start;
    padding: 0;

    in-out property <length> card-menu-x;
    in-out property <length> card-menu-y;
    in-out property <CardAdapter> card-menu-model;
    card-menu := CardMenu {
        x: card-menu-x;
        y: card-menu-y;
        model: card-menu-model;
        width: self.preferred-width;
        height: self.preferred-height;
    }
    callback pointer-event(event: PointerEvent, x: length, y: length, model: CardAdapter);
    pointer-event(event, x, y, model) => {
        if event.kind == PointerEventKind.up && event.button == PointerEventButton.right {
            root.card-menu-x = x;
            root.card-menu-y = y;
            root.card-menu-model = model;
            card-menu.show();
        }
    }

    for row in rows: HorizontalBox {
        alignment: start;
        padding: 0;
        for col in Math.min(cols, cards.length - (row * cols)): Card {
            // width: root.card-width + addl-spacing;
            model: cards[row * cols + col];
            pointer-event(event, x, y, model) => { root.pointer-event(event, x, y, model); }
        }
    }

    property <CardAdapter> card_ph: {
        image: {image: @image-url("../../icons/phosphor/PNGs/regular/vinyl-record.png"),name: "A Reign of Fish",url: "internal://release/1234"},
        title: {name: "A Reign of Fish",url: "internal://release/1234"},
        sub-title: {name: "Fresh Pliers",url: "internal://artist/9876"},
    };

    property <CardAdapter> card_ph2: {
        image: {image: @image-url("../../icons/phosphor/PNGs/regular/users-three.png"),name: "Bob The Wonderful Explorer",url: "internal://release/1234"},
        title: {name: "Bob The Wonderful Explorer",url: "internal://release/1234"},
        sub-title: {name: "A man of infinite stories and very few talents.",url: "internal://artist/9876"},
    };

    property <[CardAdapter]> cards_ph: [card_ph, card_ph2, card_ph, card_ph2, card_ph2, card_ph, card_ph, card_ph2, card_ph2, card_ph2, card_ph, card_ph, card_ph, card_ph2, card_ph];
}

