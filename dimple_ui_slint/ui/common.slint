import { StyleMetrics , VerticalBox} from "std-widgets.slint";

export global Palette  {
    in-out property<int> font-weight-bold: 700;

    in-out property<length> thumbnail-width-sidebar: 48px;

    in-out property<length> thumbnail-width-small: 70px;
    in-out property<length> thumbnail-width-medium: 120px;
    in-out property<length> thumbnail-width-large: 200px;
    in-out property<length> thumbnail-width-extra-large: 275px;
    in-out property<length> thumbnail-border-radius: 5px;
    in-out property<length> thumbnail-border-width: 1px;
    in-out property<color> thumbnail-border-color: StyleMetrics.default-text-color;

    in-out property<color> link-color: StyleMetrics.default-text-color;
    in-out property<color> link-color-hover: StyleMetrics.default-text-color.mix(blue, 0.60);
}

export global Navigator {
    callback navigate(string);
    callback refresh();
    callback url() -> string;
}

export struct LinkAdapter {
    name: string,
    url: string,
}

export struct ImageLinkAdapter {
    image: image,
    name: string,
    url: string,
}

export struct TrackAdapter {
    title: LinkAdapter,
    track_number: string,
    length: string, // 5:03
    artists: [LinkAdapter],
    plays: int,
}

export component Tag inherits TouchArea {
    // in property <color> color: #4ff692;
    in property <color> color: #f6b94f;
    in property <color> font-color: #000000;
    in property <int> font-weight: 400;
    in property <string> name: "heavy metal";
    in property <string> url;
    in property <length> font-size: 1.3rem;

    Rectangle {
        border-radius: 8px;
        height: text.min-height + 6px;
        width: text.min-width + 10px;
        background: parent.has-hover 
            ? color.brighter(0.10)
            : color;

        text := Text {
            font-size: font-size;
            text: name;
            color: font-color;
            font-weight: font-weight;
        }
    }
}

export component Link inherits TouchArea {
    in property <string> url;
    in property <string> name;
    in property <length> font-size: 1.2rem;
    in property <int> font-weight;
    padding: 0;

    mouse-cursor: pointer;
    clicked => { Navigator.navigate(url); }
    title := Text {
        vertical-alignment: bottom;
        width: root.width;
        text: name;
        // wrap: word-wrap;
        font-weight: font-weight;
        font-size: font-size;
        color: parent.has-hover 
            ? Palette.link-color-hover
            : StyleMetrics.default-text-color;
    }
}

export component Links inherits HorizontalLayout {
    in property <[LinkAdapter]> links;
    in property <length> font-size: 1.2rem;
    alignment: start;
    padding: 0;
    // TODO I think the kerning ends up incorrect when doing it this way. It
    // looks weird. But I don't know another way to get individual links with
    // fancy commas.
    for link[i] in links: HorizontalLayout {
        alignment: start;
        Link {
            name: link.name;
            url: link.url;
            font-size: font-size;
        }
        // TODO edge cases
        if i < links.length - 2:
            Text {
                vertical-alignment: bottom;
                text: ", ";
                font-size: font-size;
                // wrap: word-wrap;
            }    
        if i == links.length - 2:
            Text {
                vertical-alignment: bottom;
                text: ", and ";
                font-size: font-size;
                // wrap: word-wrap;
            }    
    }
}

export component TrackList inherits VerticalLayout {
    in-out property <[TrackAdapter]> tracks;

    in-out property <length> font-size: 1.3rem;

    HorizontalLayout {
        padding: 4px;
        Text {
            text: "#";
            font-size: root.font-size;
            font-weight: Palette.font-weight-bold;
            width: 10%;
        }
        Text {
            text: "Title";
            font-size: root.font-size;
            font-weight: Palette.font-weight-bold;
            width: 70%;
        }
        Text {
            text: "Plays";
            font-size: root.font-size;
            font-weight: Palette.font-weight-bold;
            width: 10%;
        }
        Text {
            text: "Length";
            font-size: root.font-size;
            font-weight: Palette.font-weight-bold;
            width: 10%;
        }
    }
    Rectangle {
        background: StyleMetrics.default-text-color.darker(0.5);
        height: 1px;
    }
    for track in tracks: VerticalLayout {
       HorizontalLayout {
            padding: 4px;
            Text {
                vertical-alignment: center;
                text: track.track_number;
                font-size: root.font-size;
                width: 10%;
            }
            VerticalLayout {
                width: 70%;
                spacing: 4px;
                Link {
                    name: track.title.name;
                    url: track.title.url;
                }
                Links {
                    links: track.artists;
                }
            }
            Text {
                vertical-alignment: center;
                text: track.plays;
                font-size: root.font-size;
                width: 10%;
            }
            Text {
                vertical-alignment: center;
                text: track.length;
                font-size: root.font-size;
                width: 10%;
            }
        }
    }
}
