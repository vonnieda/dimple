import { Button , LineEdit, HorizontalBox, GroupBox} from "std-widgets.slint";
import { Navigator } from "common.slint";
import { Palette, Navigator, AppState } from "common.slint";
import {StyleMetrics, VerticalBox, TextEdit, Spinner, Slider, CheckBox} from "std-widgets.slint";
import {Link, LinkAdapter, ImageLinkAdapter} from "./components/link.slint";
import {CardAdapter} from "./components/card.slint";

export struct SideBarAdapter {
    pinned_items: [CardAdapter],
}

component SideBarImageItem inherits Rectangle {
    in property <CardAdapter> card;
    
    in property <color> image-colorize;

    in property <length> image-width: Palette.thumbnail-width-sidebar;

    HorizontalLayout {
        spacing: 8px;

        TouchArea {
            width: image-width;
            height: image-width;
            mouse-cursor: pointer;
            clicked => { Navigator.navigate(card.image.url); }
            Rectangle {
                width: 100%;
                height: 100%;
                border-radius: Palette.thumbnail-border-radius;
                clip: true;
                drop-shadow-color: black;
                drop-shadow-blur: 3px;
                drop-shadow-offset-y: 1px;
                Image {
                    colorize: image-colorize;
                    width: 100%;
                    height: 100%;
                    source: card.image.image;
                    accessible-role: button;
                    accessible-description: card.image.name;
                }    
            }
        }
        VerticalLayout {
            alignment: center;
            spacing: 4px;
            title-area := Link {
                url: card.title.url;
                name: card.title.name;
                font-size: 1.3rem;
                font-weight: Palette.font-weight-bold;
            }
            sub-title-area := Link {
                url: card.sub-title.url;
                name: card.sub-title.name;
                font-size: 1.2rem;
            }
        }
    }
}

component SideBarMenuItem inherits HorizontalLayout {
    in property <image> image: @image-url("../icons/phosphor/SVGs/regular/house.svg");
    in property <string> url: "dimple://home";
    in property <string> text: "Home";
    spacing: 8px;

    TouchArea {
        width: Palette.icon-width-sidebar;
        height: Palette.icon-width-sidebar;
        clicked => { Navigator.navigate(url); }
        Image {
            source: image;
            width: Palette.icon-width-sidebar;
            height: Palette.icon-width-sidebar;
            colorize: parent.has-hover 
                ? Palette.link-color-hover
                : StyleMetrics.default-text-color;

        }
    }
    Link {
        font-size: 1.6rem;
        name: text;
        url: url;
    }
}

component SideBarRefreshItem inherits HorizontalLayout {
    in property <image> image: @image-url("../icons/phosphor/SVGs/light/arrow-clockwise-light.svg");
    in property <string> url: "dimple://refresh";
    in property <string> text: "Refresh";
    in property <bool> spin: false;

    if !Navigator.busy: HorizontalLayout {
        spacing: 8px;
        TouchArea {
            width: Palette.icon-width-sidebar;
            height: Palette.icon-width-sidebar;
            clicked => { Navigator.navigate(url); }
            Image {
                source: image;
                width: Palette.icon-width-sidebar;
                height: Palette.icon-width-sidebar;
                colorize: parent.has-hover 
                    ? Palette.link-color-hover
                    : StyleMetrics.default-text-color;
            }
        }
        VerticalLayout {
            alignment: center;
            Link {
                font-size: 1.4rem;
                name: text;
                font-weight: Palette.font-weight-bold;
                url: url;
            }
        }
    }

    if Navigator.busy: HorizontalLayout {
        spacing: 8px;
        TouchArea {
            width: Palette.icon-width-sidebar;
            height: Palette.icon-width-sidebar;
            clicked => { Navigator.navigate(url); }
            Spinner {
                indeterminate: true;
                width: Palette.icon-width-sidebar;
                height: Palette.icon-width-sidebar;
            }                
        }
        VerticalLayout {
            alignment: center;
            Link {
                font-size: 1.4rem;
                name: "Cancel";
                font-weight: Palette.font-weight-bold;
                url: url;
            }
        }
    }
}

export component SideBar inherits VerticalLayout {
    in-out property <SideBarAdapter> model;

    spacing: 16px;

    LineEdit {
        placeholder-text: "Search...";
        edited(query) => { Navigator.navigate("dimple://search/" + query); }
        font-size: 1.3rem;
        height: self.font-size * 2.5;
    }
    Rectangle {
        height: parent.spacing;
    }
    SideBarMenuItem {
        image: @image-url("../icons/phosphor/SVGs/regular/house.svg");
        url: "dimple://home";
        text: "Home";
    }
    SideBarMenuItem {
        image: @image-url("../icons/phosphor/SVGs/regular/users-three.svg");
        url: "dimple://artists";
        text: "Artists";
    }
    SideBarMenuItem {
        image: @image-url("../icons/phosphor/SVGs/regular/vinyl-record.svg");
        url: "dimple://release-groups";
        text: "Albums";
    }
    SideBarMenuItem {
        image: @image-url("../icons/phosphor/SVGs/regular/music-notes.svg");
        url: "dimple://tracks";
        text: "Tracks";
    }
    SideBarMenuItem {
        image: @image-url("../icons/phosphor/SVGs/regular/playlist.svg");
        url: "dimple://playlists";
        text: "Playlists";
    }
    SideBarMenuItem {
        image: @image-url("../icons/phosphor/SVGs/regular/globe-simple.svg");
        url: "dimple://genres";
        text: "Genres";
    }
    SideBarMenuItem {
        image: @image-url("../icons/phosphor/SVGs/regular/clock-counter-clockwise.svg");
        url: "dimple://history";
        text: "History";
    }
    SideBarMenuItem {
        image: @image-url("../icons/phosphor/SVGs/regular/queue.svg");
        url: "dimple://queue";
        text: "Queue";
    }

    // Pinned items
    for card in model.pinned-items: SideBarImageItem {
        card: card;
    }

    // Fills the space between the last normal item and the settings, at the bottom.
    Rectangle {
        
    }

    SideBarMenuItem {
        image: @image-url("../icons/phosphor/SVGs/light/arrow-left-light.svg");
        text: "Back";
        url: "dimple://back";
    }
    SideBarMenuItem {
        image: @image-url("../icons/phosphor/SVGs/light/gear-light.svg");
        text: "Settings";
        url: "dimple://settings";
    }
}

