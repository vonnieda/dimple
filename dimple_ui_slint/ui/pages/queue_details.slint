import { CardGrid, CardGridAdapter } from "../components/card_grid.slint";
import { HorizontalBox , VerticalBox} from "std-widgets.slint";
import { CardAdapter } from "../components/card.slint";
import { StyleMetrics , ScrollView, ListView, StandardTableView, Button, Palette} from "std-widgets.slint";
import { Styles, AppState, Navigator } from "../common.slint";

export global QueueDetailsAdapter {
    in property <[[StandardListViewItem]]> row_data: [
        [ { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, ],
        [ { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, ],
        [ { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, ],
    ];
    pure callback sort_model([[StandardListViewItem]], int, bool) -> [[StandardListViewItem]];
    pure callback play_now(int);
    pure callback remove_row(int);
    pure callback remove_all();
}

export component QueueDetails inherits VerticalBox {
    property <int> sort-index: -1;
    property <bool> sort-acending;
    in-out property <length> popup-x;
    in-out property <length> popup-y;
    in-out property <int> popup-row;

    popup := PopupWindow {
        x: popup-x; 
        y: popup-y; 
        Rectangle {
            border-width: 1px;
            border-color: StyleMetrics.default-text-color;
            border-radius: 8px;
            background: StyleMetrics.window-background;
            VerticalBox {
                Button {
                    text: "Play Now";
                    clicked => { QueueDetailsAdapter.play_now(popup-row); }
                }
                Button {
                    text: "Remove This";
                    clicked => { QueueDetailsAdapter.remove_row(popup-row); }
                }
                Button {
                    text: "Remove All";
                    clicked => { QueueDetailsAdapter.remove_all(); }
                }
                // Button {
                //     text: "Play Next";
                //     clicked => { TrackListAdapter.play_next(popup-row); }
                // }
            }
        }
    }    

    Text {
        text: "Play Queue";
        font-size: 3rem;
    }
        
    StandardTableView {
        vertical-stretch: 1;
        horizontal-stretch: 1;
        columns: [
            { title: "#" },
            { title: "Title" },
            { title: "Album" },
            { title: "Artist" },
            { title: "Length" },
        ];
        rows: QueueDetailsAdapter.sort_model(QueueDetailsAdapter.row_data, root.sort-index, root.sort-acending);
        sort-ascending(index) => {
            root.sort-index = index;
            root.sort-acending = true;
        }
        sort-descending(index) => {
            root.sort-index = index;
            root.sort-acending = false;
        }     

        row-pointer-event(row, event, point) => {
            // Context menu
            if event.button == PointerEventButton.right 
                    && event.kind == PointerEventKind.down {
                popup-x = point.x;
                popup-y = point.y;
                popup-row = row;
                popup.show();
            }
            // Click to go
            // if event.button == PointerEventButton.left
            //         && event.kind == PointerEventKind.down
            //         && row == root.row {
                
            //     Navigator.navigate("dimple://track/key");
            // }
        }
    }

    Text {
        horizontal-alignment: right;
        text: QueueDetailsAdapter.row_data.length + " items";
    }
}
