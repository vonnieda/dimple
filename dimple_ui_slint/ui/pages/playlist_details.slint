import { CardGrid, CardGridAdapter } from "../components/card_grid.slint";
import { HorizontalBox , VerticalBox} from "std-widgets.slint";
import { CardAdapter } from "../components/card.slint";
import { StyleMetrics , ScrollView, ListView, StandardTableView, Button, TextEdit, LineEdit, Palette} from "std-widgets.slint";
import { AppState, Styles, Texxt, PageTitle, PageSubtitle } from "../common.slint";
import { ActionButton, ActionButtons } from "../components/action_buttons.slint";

export global PlaylistDetailsAdapter {
    in property <string> key;
    in-out property <string> name: "Best Air Guitar Songs";
    in property <bool> love;
    in property <bool> download;
    in property <[[StandardListViewItem]]> row_data;

    pure callback sort_model([[StandardListViewItem]], int, bool) -> [[StandardListViewItem]];
    pure callback play_now(string);
    pure callback add_to_queue(string);
    pure callback set_download(string, bool);
    pure callback set_love(string, bool);
    pure callback delete(string);
    pure callback set_name(string, string);
}

export component PlaylistDetails inherits VerticalBox {
    alignment: start;
    padding: 0;

    property <int> sort-index: -1;
    property <bool> sort-acending;
    in-out property <length> popup-x;
    in-out property <length> popup-y;
    in-out property <int> popup-row;

    in-out property <bool> name_editing: false;
    if !name_editing: VerticalLayout {
        TouchArea {
            text := PageTitle {
                text: PlaylistDetailsAdapter.name;
            }
            width: text.width;
            height: text.height;
            clicked => { name_editing = true; }
        }
        PageSubtitle {
            text: PlaylistDetailsAdapter.row_data.length + " items";
        }
    }
    if name_editing: LineEdit {
        text: PlaylistDetailsAdapter.name;
        accepted(text) => { 
            name_editing = false;                
            PlaylistDetailsAdapter.set_name(PlaylistDetailsAdapter.key, text);
        }
    }

    StandardTableView {
        preferred-height: root.height;
        columns: [
            { title: "#", horizontal_stretch: 0.10 },
            { title: "Title", horizontal_stretch: 0.40 },
            { title: "Album", horizontal_stretch: 0.20 },
            { title: "Artist", horizontal_stretch: 0.20 },
            { title: "Length", horizontal_stretch: 0.10 },
        ];
        rows: PlaylistDetailsAdapter.sort_model(PlaylistDetailsAdapter.row_data, root.sort-index, root.sort-acending);
        sort-ascending(index) => {
            root.sort-index = index;
            root.sort-acending = true;
        }
        sort-descending(index) => {
            root.sort-index = index;
            root.sort-acending = false;
        }        
        row-pointer-event(row, event, point) => {
        }
    }
}
