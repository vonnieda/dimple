import { CardGrid, CardGridAdapter } from "../components/card_grid.slint";
import { HorizontalBox , VerticalBox} from "std-widgets.slint";
import { CardAdapter } from "../components/card.slint";
import { StyleMetrics , ScrollView, ListView, StandardTableView, Button} from "std-widgets.slint";
import { AppState, Palette } from "../common.slint";

export global PlaylistDetailsAdapter {
    in property <[[StandardListViewItem]]> row_data;
    in property <string> key;
    in property <string> name: "Best Air Guitar Songs";
    in property <bool> love;
    in property <bool> download;
    pure callback sort_model([[StandardListViewItem]], int, bool) -> [[StandardListViewItem]];
    pure callback current_row_changed(int);

    pure callback play_now(string);
    pure callback add_to_queue(string);
    pure callback set_save(bool);
    pure callback set_download(bool);
    pure callback set_love(bool);
    pure callback delete();
}

component ActionButton inherits Button {
    in property <length> button-width: 40px;
    in property <string> label;

    colorize-icon: true;
    width: button-width;
    height: button-width;
    accessible-label: label;
    accessible-role: button;
}

component ActionButtons inherits HorizontalBox {
    vertical-stretch: 0;
    horizontal-stretch: 0;
    alignment: start;

    ActionButton {
        icon: @image-url("../../icons/phosphor/SVGs/regular/play.svg");
        label: @tr("Play Now");
        clicked => { PlaylistDetailsAdapter.play_now(PlaylistDetailsAdapter.key); }
    }
    ActionButton {
        icon: @image-url("../../icons/phosphor/SVGs/regular/plus.svg");
        label: @tr("Play Later");
        clicked => { PlaylistDetailsAdapter.add_to_queue(PlaylistDetailsAdapter.key); }
    }
    ActionButton {
        icon: self.checked 
            ? @image-url("../../icons/phosphor/SVGs/fill/heart-fill.svg") 
            : @image-url("../../icons/phosphor/SVGs/regular/heart.svg");
        label: @tr("Love");
        checkable: true;
        checked: PlaylistDetailsAdapter.love;
        clicked => { PlaylistDetailsAdapter.set_love(self.checked); }
    }
    ActionButton {
        icon: self.checked 
            ? @image-url("../../icons/phosphor/SVGs/fill/download-fill.svg") 
            : @image-url("../../icons/phosphor/SVGs/regular/download.svg");
        label: @tr("Play Later");
        checkable: true;
        checked: PlaylistDetailsAdapter.download;
        clicked => { PlaylistDetailsAdapter.set_download(self.checked); }
    }
    ActionButton {
        label: @tr("Delete Playlist");
        icon: @image-url("../../icons/phosphor/SVGs/regular/trash.svg");
        // clicked => { PlaylistListAdapter.new_playlist(); }
    }


}

export component PlaylistDetails inherits VerticalBox {
    property <int> sort-index: -1;
    property <bool> sort-acending;
    in-out property <length> popup-x;
    in-out property <length> popup-y;
    in-out property <int> popup-row;

    popup := PopupWindow {
        // x: popup-x; 
        // y: popup-y; 
        Rectangle {
            border-width: 1px;
            border-color: StyleMetrics.default-text-color;
            border-radius: 8px;
            background: StyleMetrics.window-background;
            VerticalBox {
                Button {
                    text: "Add to Queue";
                    // clicked => { PlaylistDetailsAdapter.add_to_queue(popup-row); }
                }
                // Button {
                //     text: "Play Now";
                //     clicked => { TrackListAdapter.play_now(popup-row); }
                // }
                // Button {
                //     text: "Play Next";
                //     clicked => { TrackListAdapter.play_next(popup-row); }
                // }
            }
        }
    }    
        
    VerticalLayout {
        Text {
            text: PlaylistDetailsAdapter.name;
            font-size: 3rem;
        }
        ActionButtons {

        }
    }

    StandardTableView {
        vertical-stretch: 1;
        horizontal-stretch: 1;
        columns: [
            { title: "#" },
            { title: "Title" },
            { title: "Album" },
            { title: "Artist" },
            { title: "Length" },
        ];
        rows: PlaylistDetailsAdapter.sort_model(PlaylistDetailsAdapter.row_data, root.sort-index, root.sort-acending);
        current-row-changed(row) => { 
            PlaylistDetailsAdapter.current_row_changed(row);
        }
        sort-ascending(index) => {
            root.sort-index = index;
            root.sort-acending = true;
        }
        sort-descending(index) => {
            root.sort-index = index;
            root.sort-acending = false;
        }        
        row-pointer-event(row, event, point) => {
            // if event.button == PointerEventButton.left
            //         && event.kind == PointerEventKind.
            if event.button == PointerEventButton.right 
                    && event.kind == PointerEventKind.down {
                popup-x = point.x;
                popup-y = point.y;
                popup-row = row;
                popup.show();
            }
        }
    }
    Text {
        horizontal-alignment: right;
        text: PlaylistDetailsAdapter.row_data.length + " items";
    }
}
