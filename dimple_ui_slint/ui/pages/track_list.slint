import { CardGrid, CardGridAdapter } from "../components/card_grid.slint";
import { HorizontalBox , VerticalBox} from "std-widgets.slint";
import { CardAdapter } from "../components/card.slint";
import { StyleMetrics , ScrollView, ListView, StandardTableView, Button, GroupBox, StandardListView, Palette} from "std-widgets.slint";
import { AppState, Styles, Navigator } from "../common.slint";
import { PopupMenu, PopupMenuButton } from "../components/popup_menu.slint";

export global TrackListAdapter {
    in property <[[StandardListViewItem]]> row_data: [
        [ { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, ],
        [ { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, ],
        [ { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, { text: "hi" }, ],
    ];
    in property <[string]> row_keys;
    pure callback sort_table(int /* column */, bool /* ascending */);
    pure callback play_now(string /* key */);
    pure callback play_next(string /* key */);
    pure callback play_later(string /* key */);
}
 
export component TrackList inherits VerticalBox {
    in-out property <length> popup-x;
    in-out property <length> popup-y;
    in-out property <int> popup-row;

    // Looks like maybe auto positioning in 1.9.0 https://github.com/slint-ui/slint/blob/master/CHANGELOG.md
    // Improved PopupWindow positioning: positioned it to avoid clipping by the window
    popup := PopupMenu {
        x: popup-x; 
        y: popup-y; 

        PopupMenuButton {
            text: "Play Later";
            icon: @image-url("../../icons/phosphor/SVGs/regular/list-plus.svg");
            clicked => { TrackListAdapter.play_later(TrackListAdapter.row_keys[popup-row]); }
        }
        PopupMenuButton {
            text: "Play Next";
            icon: @image-url("../../icons/phosphor/SVGs/regular/queue.svg");
            clicked => { TrackListAdapter.play_next(TrackListAdapter.row_keys[popup-row]); }
        }
        PopupMenuButton {
            text: "Play Now";
            icon: @image-url("../../icons/phosphor/SVGs/regular/play.svg");
            clicked => { TrackListAdapter.play_now(TrackListAdapter.row_keys[popup-row]); }
        }
        PopupMenuButton {
            text: "Track Info";
            icon: @image-url("../../icons/phosphor/SVGs/regular/info.svg");
            clicked => { Navigator.navigate("dimple://track/" + TrackListAdapter.row_keys[root.popup-row]); }
        }
    }    

    Text {
        text: "Tracks";
        font-size: 1rem * Styles.page_title_font_rem;
    }

    table := StandardTableView {
        vertical-stretch: 1;
        horizontal-stretch: 1;
        // https://docs.slint.dev/latest/docs/slint/src/language/builtins/structs#tablecolumn
        columns: [
            { title: "Title" },
            { title: "Album" },
            { title: "Artist" },
            { title: "Track #" },
            { title: "Plays" },
            { title: "Length" },
        ];
        rows: TrackListAdapter.row_data;
        sort-ascending(index) => { TrackListAdapter.sort_table(index, true); }
        sort-descending(index) => { TrackListAdapter.sort_table(index, false); }
        row-pointer-event(row, event, point) => {
            if event.button == PointerEventButton.right 
                    && event.kind == PointerEventKind.down {
                popup-x = point.x;
                popup-y = point.y;
                popup-row = row;
                popup.show();
            }
            else if event.button == PointerEventButton.left 
                    && row == table.current-row
                    && event.kind == PointerEventKind.down {
                Navigator.navigate("dimple://track/" + TrackListAdapter.row_keys[row]);
            }
        }
    }
    
    Text {
        horizontal-alignment: right;
        text: TrackListAdapter.row_data.length + " items";
    }
}

