import { HorizontalBox , VerticalBox} from "std-widgets.slint";
import { StyleMetrics , ScrollView, ListView, StandardTableView, Button, GroupBox} from "std-widgets.slint";
import { CardAdapter } from "../components/card.slint";
import { CardGrid } from "../components/card_grid.slint";
import { LinkAdapter, Links, Link} from "../components/link.slint";
import { Palette, Navigator, AppState } from "../common.slint";

    // in property <TrackDetailsAdapter> model: {
    //     card,
    //     disambiguation,
    //     summary
    //     genres: ,
    //     artists: ,
    //     lyrics: "Hurk hurk hurk hurk hurk\nHurk hurk hurk hurk hurk",
    //     links: [{name: "https://bandcamp.com/arof",url: "internal://release/1234"}],
    // };

export global TrackDetailsAdapter {
    in property <string> key: "123";
    in property <CardAdapter> card: {
                image: {image: @image-url("../../icons/phosphor/PNGs/regular/vinyl-record.png")},
                title: {name: "A Reign of Fish"},
            };
    in property <string> disambiguation: "Not to be confused with Rain of Fish by Fargo.";
    in property <string> summary: "Fresh Pliers does it again with 'A Reign of Fish'. Magna est quis laboris veniam do laborum. Cupidatat ea ipsum aliquip fugiat eu magna labore est eu est labore. Ex nostrud culpa id veniam aliqua aliqua ipsum. Velit do id amet labore mollit id cillum commodo Lorem proident labore eu. Incididunt minim irure culpa excepteur officia sit consequat est mollit. Ipsum anim anim sunt dolore. Laborum consequat deserunt laboris ullamco cillum. Ullamco deserunt ut quis dolore aliquip esse consequat velit amet. Nulla tempor veniam dolor amet occaecat adipisicing nulla laboris.\n\nQui non irure anim irure nisi nulla ex aliquip. Sit do irure esse magna sit do eiusmod. Anim commodo velit non enim nulla.\n\nAnim incididunt dolore nulla laboris eu mollit Lorem minim reprehenderit in quis magna mollit. Labore Lorem esse anim ipsum esse irure ipsum proident deserunt officia consequat sunt sit. Ex laborum ipsum laboris nisi proident. Nulla culpa est commodo dolor. Magna sint id et ut esse mollit qui elit voluptate ea.\n\nDuis amet qui reprehenderit cupidatat qui proident pariatur non ea aute reprehenderit nisi qui. Et elit anim culpa amet eu excepteur voluptate ad adipisicing esse eiusmod. Aliqua Lorem excepteur fugiat aute ullamco ea nostrud ipsum mollit cupidatat id magna. Nisi consectetur cillum incididunt deserunt non officia non laborum non ullamco non eiusmod dolor. Eu sit aute adipisicing Lorem consectetur nisi excepteur laboris eiusmod exercitation proident eu laborum fugiat. Ad id velit minim laboris eu. Do ex aliqua nisi aliqua laborum sunt qui quis officia labore do. Deserunt culpa culpa Lorem reprehenderit consequat ad pariatur anim quis. Nulla officia id ipsum adipisicing commodo labore culpa consectetur nostrud labore. Reprehenderit minim magna qui ullamco aute incididunt. Ipsum eu ad ex consequat et amet.";
    in property <[LinkAdapter]> genres: [{name: "heavy metal"},{name: "hard rock"},{name: "acid rock"},];
    in property <[LinkAdapter]> links: [{name: "https://bandcamp.com/arof",url: "internal://release/1234"}];
    in property <string> lyrics: "Hurk hurk hurk hurk hurk\nHurk hurk hurk hurk hurk";
    in property <[LinkAdapter]> artists: [{name: "Fresh Pliers"},{name: "Example Band"},{name: "Teal Cup"},];
    in property <[LinkAdapter]> isrcs;
    in property <string> dump;
    in property <bool> save;
    in property <bool> love;
    in property <bool> download;

    pure callback play_now(string);
    pure callback add_to_queue(string);
    pure callback set_save(bool);
    pure callback set_download(bool);
    pure callback set_love(bool);
}

export component BorderImage inherits Rectangle {
    in-out property <image> image;

    border-radius: Palette.thumbnail-border-radius;
    border-color: Palette.thumbnail-border-color;
    border-width: Palette.thumbnail-border-width;
    clip: true;
    Image {
        width: parent.width;
        height: parent.height;
        source: image;
    }
}

component ActionButton inherits Button {
    in property <length> button-width: 40px;
    in property <string> label;

    colorize-icon: true;
    width: button-width;
    height: button-width;
    accessible-label: label;
    accessible-role: button;
}

component ActionButtons inherits HorizontalBox {
    alignment: space-around;

    // So thinking here queue should be dropping tracks off the end as they get played
    // and then:
    // Play Now: adds to front of queue and switches to it
    // Play Next: add to next in queue and switches to it
    // Play Later: add to end of queue and start playing
    
    ActionButton {
        icon: @image-url("../../icons/phosphor/SVGs/regular/play.svg");
        label: @tr("Play Now");
        clicked => { TrackDetailsAdapter.play_now(TrackDetailsAdapter.key); }
    }
    ActionButton {
        icon: @image-url("../../icons/phosphor/SVGs/regular/plus.svg");
        label: @tr("Play Later");
        clicked => { TrackDetailsAdapter.add_to_queue(TrackDetailsAdapter.key); }
    }
    ActionButton {
        icon: self.checked 
            ? @image-url("../../icons/phosphor/SVGs/fill/heart-fill.svg") 
            : @image-url("../../icons/phosphor/SVGs/regular/heart.svg");
        label: @tr("Love");
        checkable: true;
        checked: TrackDetailsAdapter.love;
        clicked => { TrackDetailsAdapter.set_love(self.checked); }
    }
    ActionButton {
        icon: self.checked 
            ? @image-url("../../icons/phosphor/SVGs/fill/download-fill.svg") 
            : @image-url("../../icons/phosphor/SVGs/regular/download.svg");
        label: @tr("Play Later");
        checkable: true;
        checked: TrackDetailsAdapter.download;
        clicked => { TrackDetailsAdapter.set_download(self.checked); }
    }
}

export component TrackDetails inherits ScrollView {
    VerticalLayout {
        alignment: start;
        // Header: Image, Title, Artists, Genres, Summary
        HorizontalLayout {
            alignment: start;
            VerticalLayout {
                BorderImage {
                    width: Palette.thumbnail-width-extra-large;
                    height: Palette.thumbnail-width-extra-large;
                    image: TrackDetailsAdapter.card.image.image;
                }
                ActionButtons {
                }
                Rectangle {
                    vertical-stretch: 1;
                }
            }
            VerticalBox {
                alignment: start;
                // Title
                Text {
                    text: TrackDetailsAdapter.card.title.name;
                    font-weight: Palette.font-weight-bold;
                    font-size: 3rem;
                    wrap: word-wrap;
                }
                // Type and artists
                if TrackDetailsAdapter.artists.length > 0: HorizontalLayout {
                    alignment: start;
                    Text {
                        text: "Track by ";
                        font-size: 1.3rem;
                    }
                    Links {
                        links: TrackDetailsAdapter.artists;
                        font-size: 1.3rem;
                    }
                }
                // Disambiguation
                if TrackDetailsAdapter.disambiguation != "": Text {
                    text: TrackDetailsAdapter.disambiguation;
                    font-italic: true;
                    font-size: 1.3rem;
                }
                // Genres
                if TrackDetailsAdapter.genres.length > 0: HorizontalLayout {
                    alignment: start;
                    Text {
                        text: "In ";
                        font-size: 1.3rem;
                    }    
                    Links {
                        links: TrackDetailsAdapter.genres;
                        font-size: 1.3rem;
                    }
                }
                // Summary
                if TrackDetailsAdapter.summary != "": Text {
                    text: TrackDetailsAdapter.summary;
                    wrap: word-wrap;
                    font-size: 1.2rem;
                }
            }
        }

        // Lyrics
        if TrackDetailsAdapter.lyrics != "": VerticalBox {
            Text {
                text: "Lyrics";
                font-weight: Palette.font-weight-bold;
                font-size: 2rem;
            }
            Text {
                text: TrackDetailsAdapter.lyrics;
                wrap: word-wrap;
                font-size: 1.3rem;
            }
        }

        // Links
        if TrackDetailsAdapter.links.length > 0: VerticalBox {
            Text {
                text: "Links";
                font-weight: Palette.font-weight-bold;
                font-size: 2rem;
            }
            for link in TrackDetailsAdapter.links: Link {
                url: link.url;
                name: link.name;
                font-size: 1.3rem;
            }
        }

        // Debug Dump
        if AppState.debug: VerticalBox {
            Text {
                text: "Debug";
                font-weight: Palette.font-weight-bold;
                font-size: 2rem;
            }
            Text {
                text: TrackDetailsAdapter.dump;
                wrap: word-wrap;
                font-size: 1.3rem;
            }
        }
    }
}
