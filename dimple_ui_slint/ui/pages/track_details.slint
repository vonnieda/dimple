import { HorizontalBox , VerticalBox} from "std-widgets.slint";
import { StyleMetrics , ScrollView, ListView, StandardTableView, Button, GroupBox, LineEdit, TextEdit, Palette} from "std-widgets.slint";
import { CardAdapter } from "../components/card.slint";
import { CardGrid } from "../components/card_grid.slint";
import { LinkAdapter, Links, Link, LinkButtons} from "../components/link.slint";
import { Styles, Navigator, AppState, Label, PageTitle, PageSubtitle, SectionTitle } from "../common.slint";
import { TagList } from "../components/tag.slint";
import { BorderImage } from "../components/border_image.slint";

export global TrackDetailsAdapter {
    in property <string> key;
    in property <CardAdapter> card: {
        image: {image: @image-url("../../icons/phosphor/PNGs/regular/vinyl-record.png")},
        title: {name: "A Reign of Fish"},
    };
    in property <string> disambiguation: "Not to be confused with Rain of Fish by Fargo.";
    in property <string> summary: "Fresh Pliers does it again with 'A Reign of Fish'. Ex nostrud culpa id veniam aliqua aliqua ipsum. Velit do id amet labore mollit id cillum commodo Lorem proident labore eu. Incididunt minim irure culpa excepteur officia sit consequat est mollit. Ipsum anim anim sunt dolore. Laborum consequat deserunt laboris ullamco cillum. Ullamco deserunt ut quis dolore aliquip esse consequat velit amet. Nulla tempor veniam dolor amet occaecat adipisicing nulla laboris.\n\nQui non irure anim irure nisi nulla ex aliquip. Sit do irure esse magna sit do eiusmod. Anim commodo velit non enim nulla.\n\nAnim incididunt dolore nulla laboris eu mollit Lorem minim reprehenderit in quis magna mollit. Labore Lorem esse anim ipsum esse irure ipsum proident deserunt officia consequat sunt sit. Ex laborum ipsum laboris nisi proident. Nulla culpa est commodo dolor. Magna sint id et ut esse mollit qui elit voluptate ea.";
    in property <[LinkAdapter]> genres: [{name: "heavy metal"},{name: "hard rock"},{name: "acid rock"},{name: "heavy metal"},{name: "hard rock"},{name: "acid rock"},{name: "heavy metal"},{name: "hard rock"},{name: "acid rock"},{name: "heavy metal"},{name: "hard rock"},{name: "acid rock"},];
    in property <[LinkAdapter]> links: [{name: "https://bandcamp.com/arof",url: "internal://release/1234"},{name: "https://bandcamp.com/arof",url: "internal://release/1234"}];
    in property <string> lyrics: "Hurk hurk hurk hurk hurk\nHurk hurk hurk hurk hurk\nHurk hurk hurk hurk hurk\n\nHurk hurk hurk hurk hurk\nHurk hurk hurk hurk hurk\nHurk hurk hurk hurk hurk\nHurk hurk hurk hurk hurk\n\nHurk hurk hurk hurk hurk\nHurk hurk hurk hurk hurk\nHurk hurk hurk hurk hurk\n";
    in property <[LinkAdapter]> artists: [{name: "Fresh Pliers"},{name: "Example Band"},{name: "Teal Cup"},];
    in property <[LinkAdapter]> isrcs;
    in property <[CardAdapter]> releases: [card, card, card];
    in property <string> release-date: "2024-03-19";
    
    in property <string> dump;
    in property <bool> save;
    in property <bool> love;
    in property <bool> download;

    pure callback set_save(bool);
    pure callback set_download(bool);
    pure callback set_love(bool);

    pure callback set_lyrics(string, string);
}

export component TrackDetails inherits ScrollView {
    horizontal-scrollbar-policy: always-off;

    VerticalBox {
        width: 100%;
        alignment: start;
        padding: 0;

        HorizontalBox {
            padding: 0;

            VerticalLayout {
                BorderImage {
                    width: Styles.thumbnail-width-extra-large;
                    height: Styles.thumbnail-width-extra-large;
                    source: TrackDetailsAdapter.card.image.image;
                }
                HorizontalBox {
                    alignment: space-between;
                    Button {
                        icon: @image-url("../../icons/phosphor/SVGs/regular/list-plus.svg");
                        colorize-icon: true;                
                        clicked => { AppState.play_later(TrackDetailsAdapter.key); }
                    }
                    Button {
                        icon: @image-url("../../icons/phosphor/SVGs/regular/queue.svg");
                        colorize-icon: true;                
                        clicked => { AppState.play_next(TrackDetailsAdapter.key); }
                    }
                    Button {
                        icon: @image-url("../../icons/phosphor/SVGs/regular/play.svg");
                        colorize-icon: true;                
                        clicked => { AppState.play_now(TrackDetailsAdapter.key); }
                    }
                }
            }
            VerticalBox {
                alignment: start;
                padding: 0;

                VerticalLayout {
                    PageTitle {
                        text: TrackDetailsAdapter.card.title.name;
                    }
                    if TrackDetailsAdapter.disambiguation != "": PageSubtitle {
                        text: TrackDetailsAdapter.disambiguation;
                    }
                }
                HorizontalLayout {
                    Label {
                        text: "By ";
                        font-size: Styles.default-font-size * 1.1;
                    }
                    Links {
                        links: TrackDetailsAdapter.artists;
                        height: self.preferred-height;
                        font-size: Styles.default-font-size * 1.1;
                    }
                }
                TagList {
                    tags: TrackDetailsAdapter.genres;
                    height: self.preferred-height;
                }                
                // LinkButtons {
                //     links: TrackDetailsAdapter.links;
                //     height: self.preferred-height;
                // }
                if TrackDetailsAdapter.summary != "": Label {
                    text: TrackDetailsAdapter.summary;
                    wrap: word-wrap;
                    font-family: Styles.text-block-font-family;
                }
            }
        }

        if TrackDetailsAdapter.releases.length > 0: VerticalBox {
            alignment: start;
            padding: 0;
            SectionTitle {
                text: "Released On";
            }
            CardGrid {
                cards: TrackDetailsAdapter.releases;
                max-rows: 1;
            }
        }
        
        VerticalBox {
            alignment: start;
            padding: 0;

            in-out property <bool> lyrics_editing: false;

            TouchArea {
                width: title.width;
                height: title.height;
                title := SectionTitle {
                    text: "Lyrics";
                }
                clicked => { lyrics_editing = !lyrics_editing; }
            }
            if !lyrics_editing: Label {
                text: TrackDetailsAdapter.lyrics;
                font-family: Styles.text-block-font-family;
            }
            if lyrics_editing: VerticalBox {
                text_edit := TextEdit {
                    text: TrackDetailsAdapter.lyrics;
                    min-height: 200px;
                    font-size: Styles.default-font-size;
                }
                HorizontalBox {
                    Button {
                        text: "Save";
                        clicked => {
                            lyrics_editing = false;                
                            TrackDetailsAdapter.set_lyrics(TrackDetailsAdapter.key, text_edit.text);
                        }
                    }
                    Button {
                        text: "Cancel";
                        clicked => {
                            // TODO reset if changed
                            lyrics_editing = false;                
                        }
                    }
                }
            }
        }

        if TrackDetailsAdapter.links.length > 0: VerticalBox {
            alignment: start;
            padding: 0;
            SectionTitle {
                text: "Links";
            }
            for link in TrackDetailsAdapter.links: Link {
                url: link.url;
                name: link.name;
            }
        }
    }
}
