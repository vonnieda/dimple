import { HorizontalBox , VerticalBox} from "std-widgets.slint";
import { StyleMetrics , ScrollView, ListView, StandardTableView} from "std-widgets.slint";
import { HorizontalBox , VerticalBox} from "std-widgets.slint";
import { StyleMetrics , ScrollView, ListView, StandardTableView, GroupBox} from "std-widgets.slint";
import { CardAdapter } from "./components/card.slint";
import { CardGrid, CardGridAdapter } from "./components/card_grid.slint";
import { LinkAdapter, Links, Link} from "./components/link.slint";
import { Palette, Navigator, AppState } from "./common.slint";
import { MediumAdapter } from "./components/medium.slint";
import { ImageLinkAdapter, LinkAdapter, Links, Link} from "./components/link.slint";
import { ArtistDetailsAdapter } from "./pages/artist_details.slint";
import { ReleaseDetailsAdapter } from "./pages/release_details.slint";
import { ReleaseGroupDetailsAdapter } from "./pages/release_group_details.slint";
import { SettingsAdapter } from "./pages/settings.slint";
import { HomeAdapter } from "./pages/home.slint";
import { PlayerBarAdapter, PlayerState } from "./player_bar.slint";
import { ArtistDetails } from "pages/artist_details.slint";
import { ReleaseGroupDetails } from "pages/release_group_details.slint";
import { ReleaseDetails } from "pages/release_details.slint";
import { TrackDetails, TrackDetailsAdapter } from "pages/track_details.slint";
import { RecordingDetails, RecordingDetailsAdapter } from "pages/recording_details.slint";
import { TrackListAdapter } from "pages/track_list.slint";
import { Home } from "pages/home.slint";
import { Settings } from "pages/settings.slint";
import { PlayerBar } from "player_bar.slint";
import { SideBar, SideBarAdapter } from "side_bar.slint";
import { ArtistList } from "pages/artist_list.slint";
import { ReleaseGroupList } from "pages/release_group_list.slint";
import { ReleaseList } from "pages/release_list.slint";
import { TrackList } from "pages/track_list.slint";
import { Search } from "pages/search.slint";
import { GenreList } from "pages/genre_list.slint";
import { GenreDetailsAdapter, GenreDetails } from "pages/genre_details.slint";
import { PlaylistList } from "pages/playlist_list.slint";
import { PlaylistDetailsAdapter, PlaylistDetails } from "pages/playlist_details.slint";
import { EventListAdapter, EventList } from "pages/event_list.slint";

import "../fonts/Roboto/Roboto-Black.ttf";
import "../fonts/Roboto/Roboto-BlackItalic.ttf";
import "../fonts/Roboto/Roboto-Bold.ttf";
import "../fonts/Roboto/Roboto-BoldItalic.ttf";
import "../fonts/Roboto/Roboto-Italic.ttf";
import "../fonts/Roboto/Roboto-Light.ttf";
import "../fonts/Roboto/Roboto-LightItalic.ttf";
import "../fonts/Roboto/Roboto-Medium.ttf";
import "../fonts/Roboto/Roboto-MediumItalic.ttf";
import "../fonts/Roboto/Roboto-Regular.ttf";
import "../fonts/Roboto/Roboto-Thin.ttf";
import "../fonts/Roboto/Roboto-ThinItalic.ttf";
import { NavBar } from "nav_bar.slint";

export { Navigator, Palette, AppState, TrackListAdapter, 
    EventListAdapter, PlaylistDetailsAdapter,
    SettingsAdapter }

export enum Page { Home, Search,
    ArtistList, ArtistDetails,
    ReleaseList, ReleaseDetails,
    ReleaseGroupList, ReleaseGroupDetails,
    TrackList, TrackDetails,
    PlaylistList, PlaylistDetails,
    Settings, GenreList, GenreDetails, RecordingDetails,
    QueueDetails, EventList,
}

export component AppWindow inherits Window {
    in-out property <Page> page: TrackList;

    in-out property <HomeAdapter> home;
    in-out property <CardGridAdapter> search;
    in-out property <CardGridAdapter> artist-list;
    in-out property <ArtistDetailsAdapter> artist-details;
    in-out property <CardGridAdapter> release-group-list;
    in-out property <ReleaseGroupDetailsAdapter> release-group-details;
    in-out property <CardGridAdapter> release-list;
    in-out property <ReleaseDetailsAdapter> release-details;
    in-out property <CardGridAdapter> genre-list;
    in-out property <GenreDetailsAdapter> genre-details;
    in-out property <TrackDetailsAdapter> track-details;
    in-out property <RecordingDetailsAdapter> recording-details;
    in-out property <CardGridAdapter> playlist-list;
    in-out property <PlayerBarAdapter> player-bar: {
        position_seconds: 30,
        position_label: "00:30",
        duration_seconds: 120,
        duration_label: "02:00",
        now-playing-artist: {
            image: {image: @image-url("../images/dark.png"),name: "A Reign of Fish",url: "internal://release/1234"},
            title: {name: "A Reign of Fish",url: "internal://release/1234"},
            sub-title: {name: "Fresh Pliers",url: "internal://artist/9876"},
        },
        now-playing-release: {
            image: {image: @image-url("../images/dark.png"),name: "A Reign of Fish",url: "internal://release/1234"},
            title: {name: "Fresh Pliers",url: "internal://release/1234"},
            sub-title: {name: "Fresh Pliers",url: "internal://artist/9876"},
        },
        now-playing-recording: {
            image: {image: @image-url("../images/light.png"),name: "A Reign of Fish",url: "internal://release/1234"},
            title: {name: "Lemon on Fire",url: "internal://release/1234"},
            sub-title: {name: "Fresh Pliers",url: "internal://artist/9876"},
        },
        player-state: PlayerState.Playing,
    };
    in-out property <SideBarAdapter> sidebar;

    title: "Dimple";
    icon: @image-url("../images/app_icon_512x512.png");
    preferred-width: 1440px;
    preferred-height: 1024px;

    VerticalLayout {
        padding: 8px;
        padding-top: 4px;
        spacing: 4px;
        // NavBar {}
        HorizontalLayout {
            spacing: 8px;
            padding: 0;
            GroupBox {
                min-width: 200px;
                SideBar {
                    model: root.sidebar;
                }
            }
            VerticalLayout {
                GroupBox {
                    horizontal-stretch: 1;
                    Rectangle {
                        if page == Page.Home: Home {
                            model: root.home;
                        }
                        if page == Page.Search: Search {
                            model: root.search;
                        }
                        if page == Page.ArtistList: ArtistList {
                            model: root.artist-list;
                        }
                        if page == Page.ArtistDetails: ArtistDetails {  
                            model: root.artist-details;
                        }
                        if page == Page.ReleaseGroupList: ReleaseGroupList {  
                            model: root.release-group-list;
                        }
                        if page == Page.ReleaseGroupDetails: ReleaseGroupDetails {  
                            model: root.release-group-details;
                        }
                        if page == Page.ReleaseList: ReleaseList {  
                            model: root.release-list;
                        }                
                        if page == Page.ReleaseDetails: ReleaseDetails {  
                            model: root.release-details;
                        }                
                        if page == Page.TrackList: TrackList {}
                        if page == Page.TrackDetails: TrackDetails {  
                            model: root.track-details;
                        }
                        if page == Page.RecordingDetails: RecordingDetails {  
                            model: root.recording-details;
                        }
                        if page == Page.GenreList: GenreList {  
                            model: root.genre-list;
                        }
                        if page == Page.GenreDetails: GenreDetails {  
                            model: root.genre-details;
                        }
                        if page == Page.PlaylistList: PlaylistList {  
                            model: root.playlist-list;
                        }
                        if page == Page.PlaylistDetails: PlaylistDetails {}
                        if page == Page.EventList: EventList {}
                        if page == Page.Settings: Settings {}
                    }
                }    
            }
        }   
        GroupBox {
            vertical-stretch: 0;
            PlayerBar {
                model: player-bar;
            }
        }
    }
}
