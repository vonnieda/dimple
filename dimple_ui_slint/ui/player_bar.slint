import { Slider , GroupBox, HorizontalBox} from "std-widgets.slint";
import { StyleMetrics, Button, VerticalBox, Palette } from "std-widgets.slint";
import { CardAdapter } from "components/card.slint";
import {Link, LinkAdapter} from "./components/link.slint";
import { Styles, Navigator, AppState } from "common.slint";

export enum PlayerState {
    Playing,
    Paused,
    Stopped,
}

export global PlayerBarAdapter {
    in property <CardAdapter> now_playing_artist: {
        image: {image: @image-url("../icons/phosphor/PNGs/regular/vinyl-record.png")},
        title: {name: "A Reign of Fish"},
    };
    in property <CardAdapter> now_playing_release: {
        image: {image: @image-url("../icons/phosphor/PNGs/regular/vinyl-record.png")},
        title: {name: "A Reign of Fish"},
    };
    in property <CardAdapter> now_playing_track: {
        image: {image: @image-url("../icons/phosphor/PNGs/regular/vinyl-record.png")},
        title: {name: "A Reign of Fish"},
    };
    in property <CardAdapter> up_next_artist: {
        image: {image: @image-url("../icons/phosphor/PNGs/regular/vinyl-record.png")},
        title: {name: "A Reign of Fish"},
    };
    in property <CardAdapter> up_next_release: {
        image: {image: @image-url("../icons/phosphor/PNGs/regular/vinyl-record.png")},
        title: {name: "A Reign of Fish"},
    };
    in property <CardAdapter> up_next_track: {
        image: {image: @image-url("../icons/phosphor/PNGs/regular/vinyl-record.png")},
        title: {name: "A Reign of Fish"},
    };
    in-out property <float> position_seconds: 20;
    in property <int> duration_seconds: 120;
    in property <string> position_label: "00:20";
    in property <string> duration_label: "02:00";
    in property <PlayerState> player_state;
    in property <image> waveform: @image-url("../images/waveform.png");
}

export component BorderImage inherits TouchArea {
    in-out property <image> image;
    mouse-cursor: MouseCursor.pointer;
    Rectangle {
        width: parent.width;
        height: parent.width;
        border-radius: Styles.thumbnail-border-radius;
        border-color: Styles.thumbnail-border-color;
        border-width: Styles.thumbnail-border-width;
        clip: true;
        Image {
            width: parent.width;
            height: parent.height;
            source: image;
        }
    }
}

component InfoAreaLabel inherits HorizontalLayout {
    in property <image> icon;
    in property <float> font-weight;
    in property <LinkAdapter> link;

    Image {
        source: icon;
        height: 1.5rem;
        width: 1.5rem;
        colorize: Palette.foreground;
    }
    Rectangle {
        width: 8px;
    }
    Link {
        url: link.url;
        name: link.name;
        vertical-alignment: bottom;
        font-size: 1.5rem;
        font-weight: font-weight;
    }
}

component PlayerButtons inherits HorizontalLayout {
    in property <bool> playing: false;
    TouchArea {
        width: 46px;
        height: 46px;
        clicked => { AppState.player_previous(); }
        Image {
            source: @image-url("../icons/phosphor/SVGs/fill/skip-back-circle-fill.svg");
            width: 46px;
            height: 46px;
            colorize: parent.has-hover 
                ? Styles.link-color-hover
                : Palette.foreground;
        }                
    }
    TouchArea {
        width: 46px;
        height: 46px;
        clicked => { AppState.player_play_pause(); }
        if playing: Image {
            source: @image-url("../icons/phosphor/SVGs/fill/pause-circle-fill.svg");
            width: 46px;
            height: 46px;
            colorize: parent.has-hover ? Styles.link-color-hover
                : Palette.foreground;
        }                
        if !playing: Image {
            source: @image-url("../icons/phosphor/SVGs/fill/play-circle-fill.svg");
            width: 46px;
            height: 46px;
            colorize: parent.has-hover 
                ? Styles.link-color-hover
                : Palette.foreground;
        }                
    }
    TouchArea {
        width: 46px;
        height: 46px;
        clicked => { AppState.player_next(); }
        Image {
            source: @image-url("../icons/phosphor/SVGs/fill/skip-forward-circle-fill.svg");
            width: 46px;
            height: 46px;
            colorize: parent.has-hover 
                ? Styles.link-color-hover
                : StyleMetrics.default-text-color;
        }                
    }                        
}

component Scrubber inherits VerticalLayout {
    in-out property <float> position-seconds;
    in property <int> duration-seconds: 120;
    in property <string> position-label: "00:30";
    in property <string> duration-label: "02:00";
    
    slider := Slider { 
        value <=> position-seconds;
        maximum: duration-seconds;
        height: self.min-height;
        changed => { AppState.player_seek(self.value) }
    }
    HorizontalLayout {
        Text {
            text: position-label;
            font-size: 1rem;
        }
        Text {
            horizontal-alignment: right;
            text: duration-label;
            font-size: 1rem;
        }
    }
}

component TrackInfo inherits VerticalLayout {
    in property <LinkAdapter> artist;
    in property <LinkAdapter> release;
    in property <LinkAdapter> track;
    spacing: 4px;
    InfoAreaLabel {
        icon: @image-url("../icons/phosphor/SVGs/regular/music-notes.svg");
        link: track;
    }
    InfoAreaLabel {
        icon: @image-url("../icons/phosphor/SVGs/regular/users-three.svg");
        link: artist;
    }
    InfoAreaLabel {
        icon: @image-url("../icons/phosphor/SVGs/regular/vinyl-record.svg");
        link: release;
    }
}

export component PlayerBar {
    HorizontalLayout {
        BorderImage {
            width: Styles.thumbnail-width-medium;
            height: Styles.thumbnail-width-medium;
            image: PlayerBarAdapter.now-playing-track.image.image;
            clicked => { Navigator.navigate("dimple://queue") }
        }
        VerticalLayout {
            horizontal-stretch: 1;
            padding-left: 8px;
            HorizontalLayout {
                TrackInfo {
                    horizontal-stretch: 0;
                    artist: PlayerBarAdapter.now-playing-artist.title;
                    release: PlayerBarAdapter.now-playing-release.title;
                    track: PlayerBarAdapter.now-playing-track.title;
                }
                Rectangle {
                    horizontal-stretch: 1;
                }
                PlayerButtons {
                    playing: PlayerBarAdapter.player-state == PlayerState.Playing;
                }
            }
            VerticalLayout {
                padding-top: 2px;
                padding-bottom: 2px;
                horizontal-stretch: 1;
                image := Image {
                    source: PlayerBarAdapter.waveform;
                    image-fit: ImageFit.fill;
                    height: 24px;
                }
            }
            Scrubber {
                position-seconds <=> PlayerBarAdapter.position-seconds;
                position-label: PlayerBarAdapter.position-label;
                duration-seconds: PlayerBarAdapter.duration-seconds;
                duration-label: PlayerBarAdapter.duration-label;
            }
        }
    }
}
